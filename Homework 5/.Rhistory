predict(fit,as.factor(c("Action")))
library("mlbench", lib.loc="~/R/win-library/3.2")
data(HouseVotes84)
HouseVotes84
View(HouseVotes84)
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
nmgenre_df<-sapply(ctGenere_df[-1],normalize))
nmgenre_df<-sapply(ctGenere_df[-1],normalize)
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-sapply(ctGenere_df[-1],normalize)
nmgenre_df<-as.data.frame(sapply(ctGenere_df[-1],normalize))
getwd(0)
getwd()
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
write.csv(genere_df,"test.txt")
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_film;")
genere_df = fetch(rs, n=-1)
write.csv(genere_df,"pras.txt")
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cluster_genere")
genere_df = fetch(rs, n=-1)
write.csv(genere_df,"train.csv",row.names = FALSE)
View(genere_df)
write.csv(x = genere_df,file = "train.csv",row.names = FALSE)
#bayes with test and train dataset
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	mv_id,sum(case when genere='Romance' then 1 else 0 end) 'Romance',
sum(case when genere='Science  Fiction' then 1 else 0 end) 'SciFi',
sum(case when genere='Horror' then 1 else 0 end) 'Horror',
sum(case when genere='Comedy' then 1 else 0 end) 'Comedy',
sum(case when genere='Drama' then 1 else 0 end) 'Drama',
sum(case when genere='Action' then 1 else 0 end) 'Action',
sum(case when genere='Documentary' then 1 else 0 end) 'Documentary',
sum(case when genere='Classic' then 1 else 0 end) 'Classic'
from movie_genere group by mv_id order by mv_id;")
ctGenere_df = fetch(rs, n=-1)
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-as.data.frame(sapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
#Create Naive Bayes Predictor
model<-naiveBayes(mv_id~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
model
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
nmgenre_df[,10]<-as.factor(ctGenere_df[,1])
ctGenere_df[,1]
as.factor(ctGenere_df[,1])
nmgenre_df<-as.data.frame(sapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,9]<-as.factor(ctGenere_df[,1])
model<-naiveBayes(mv_id~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
model
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,9]<-as.factor(ctGenere_df[,1])
model<-naiveBayes(mv_id~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	* from cluster_genere")
ctGenere_df = fetch(rs, n=-1)
normalize <-function(x){
num <- x-min(x)
denom <- max(x)-min(x)
return (num/denom)
}
nmgenre_df<-as.data.frame(lapply(ctGenere_df[-1],normalize))
nmgenre_df["mv_id"]<-NA
nmgenre_df[,9]<-as.factor(ctGenere_df[,1])
nmgenre_df[1:8]
model
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select 	* from cluster_genere")
ctGenere_df = fetch(rs, n=-1)
nmgenre_df[,1]<-as.factor(ctGenere_df[,1])
View(nmgenre_df)
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from cust_genere")
ctGenere_df = fetch(rs, n=-1)
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select * from clust_genere")
ctGenere_df = fetch(rs, n=-1)
#Create Naive Bayes Predictor
model<-naiveBayes(mv_id~.,data=nmgenre_df)
predict(model,nmgenre_df[1:8])
model
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_film;")
genere_df = fetch(rs, n=-1)
genere_df=as.data.frame(lapply(genere_df,as.factor))
fit<-naiveBayes(movie_id~.,data=genere_df,laplace = 3)
predict(fit,as.factor(c("Action")))
cust_film
rs
genere_df
predict(fit,as.factor(c("Action","Drama")))
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_film;")
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_film;")
genere_df = fetch(rs, n=-1)
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_film;")
library(RMySQL)
sqldb=dbConnect(MySQL(),user='apps',password='',dbname='test',host='localhost')
rs = dbSendQuery(sqldb, "select movie_id,genere from cust_genere;")
genere_df = fetch(rs, n=-1)
exit
exit()
setwd("C:/Users/Ganesh/Google Drive/Courses/STAT S 670/Homework 5")
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
retColMedian<-function(mat){
n<-nrow(mat)
for(i in 1:ncol(mat)){
if(i==1){
med<-cbind(rep(median(mat[,i]),n))
}else{
#print(median(mat[,i]))
med<-cbind(med,rep(median(mat[,i]),n))
}
}
#print(med)
med
}
retRowMedian<-function(mat){
n<-ncol(mat)
for(i in 1:nrow(mat)){
if(i==1){
med<-rbind(rep(median(mat[i,]),n))
}else{
#print(median(mat[,i]))
med<-rbind(med,rep(median(mat[i,]),n))
}
}
#print(med)
med
}
subtractCol<-function(matrix,medianmat){
x<-matrix-medianmat
print(x)
x
}
medianPolishCol<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
}
mat1
}
medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
1/100
3/100
5/100
7/100
myplotfit <- function(outmpol,outlim=0,...) {
# outmpol is output of medpolish in library(eda) or library(stats)
# be sure to assign dimnames to matrix being polished
oldpar <- par()
par(fig=c(0,.7,0,1))
nc <- length(outmpol$col)
nr <- length(outmpol$row)
a <- rep(outmpol$row,nc)
b <- rep(outmpol$col,rep(nr,nc))
sqrt2 <- sqrt(2)
ab <- cbind((a-b)/sqrt2,(a+b)/sqrt2)
xrange <- range(ab[,1]) + c(-.1,.1)*(max(ab[,1])-min(ab[,1]))
yrange <- range(ab[,2]) + c(-.1,.1)*(max(ab[,2])-min(ab[,2]))
dx <- (xrange[2]-xrange[1])/50
dy <- (yrange[2]-yrange[1])/50
plot(ab[,1],ab[,2],axes=F,xlim=xrange,ylim=yrange,xlab="",ylab="",...)
segments((min(a)-outmpol$col)/sqrt2, (min(a)+outmpol$col)/sqrt2,
(max(a)-outmpol$col)/sqrt2, (max(a)+outmpol$col)/sqrt2,lty=3)
segments((outmpol$row-min(b))/sqrt2, (outmpol$row+min(b))/sqrt2,
(outmpol$row-max(b))/sqrt2, (outmpol$row+max(b))/sqrt2,lty=3)
# segments((outmpol$row)/sqrt2-min(b), (outmpol$row)/sqrt2+min(b),
#        (outmpol$row)/sqrt2-max(b), (outmpol$row)/sqrt2+max(b),lty=3)
yrowloc <-  rep(max(b),nr)
xrowloc <-  outmpol$row
# text((xrowloc-yrowloc)/sqrt2-dx,dy+(xrowloc+yrowloc)/sqrt2,format(1:nr))
text((xrowloc-yrowloc)/sqrt2-dx,dy+(xrowloc+yrowloc)/sqrt2,
names(sort(outmpol$row)))
xcolloc <- rep(max(a),nc)
ycolloc <- outmpol$col
# text(dx+(xcolloc-ycolloc)/sqrt2,dy+(xcolloc+ycolloc)/sqrt2,format(1:nc))
text(dx+(xcolloc-ycolloc)/sqrt2,dy+(xcolloc+ycolloc)/sqrt2,
names(sort(outmpol$col)))
ynames <- format(round(outmpol$overall + sqrt2*pretty(ab[,2])))
axis(2,at=pretty(ab[,2]),labels=ynames)
# add vertical lines when there is an outlier
if(abs(outlim) > 1e-4) {
out.index <- which(abs(outmpol$res) > outlim, arr.ind=T)
# find (r,c) for outlier indices
zz.x <- outmpol$row[out.index[,1]]
zz.y <- outmpol$col[out.index[,2]]
# outlier points at (zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2
# draw segment from here to end of residual
segments((zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2,
(zz.x-zz.y)/sqrt2, (zz.x+zz.y)/sqrt2 + outmpol$res[out.index])
}
par <- oldpar
invisible()
}
library(eda)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
medpolish(mat)
a<-medpolish(mat)
myplotfit(a)
plot(a)
symbols(a)
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
?medpolish()
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
result
result$residuals
c(result$residuals)
expand.grid(1:4,1:4)
genNos<-expand.grid(1:4,1:4)
cbind(genNos$Var2,genNos$Var1,residuals())
cbind(genNos$Var2,genNos$Var1,residuals
)
cbind(genNos$Var2,genNos$Var1,residuals)
cbind(genNos$Var2,genNos$Var1,residuals)
residuals
res<-c(result$residuals)
cbind(genNos$Var2,genNos$Var1,res)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
cbind(genNos$Var2,genNos$Var1,res)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
shape(1:4,1:4,circlr)
symbol(1:4,1:4,circles)
symbols(1:4,1:4,circles)
symbols(1:4,1:4,"circles")
?symbols
require(stats); require(grDevices)
x <- 1:10
y <- sort(10*runif(10))
z <- runif(10)
z3 <- cbind(z, 2*runif(10), runif(10))
symbols(x, y, thermometers = cbind(.5, 1, z), inches = .5, fg = 1:10)
symbols(x, y, thermometers = z3, inches = FALSE)
text(x, y, apply(format(round(z3, digits = 2)), 1, paste, collapse = ","),
adj = c(-.2,0), cex = .75, col = "purple", xpd = NA)
require(stats); require(grDevices)
x <- 1:10
y <- sort(10*runif(10))
z <- runif(10)
z3 <- cbind(z, 2*runif(10), runif(10))
symbols(x, y, thermometers = cbind(.5, 1, z), inches = .5, fg = 1:10)
symbols(x, y, circles = x, inches = .5, fg = 1:10)
plotvar[plotvar[3]>0]
plotvar[3]
plotvar[,3]
plotvar[plotvar[,3]>0]
symbols(pos[,1],pos[,2],circles = pos[,3])
pos<-plotvar[plotvar[,3]>0]
symbols(pos[,1],pos[,2],circles = pos[,3])
pos[,3]
pos
pos<-plotvar[plotvar[,3]>0,]
symbols(pos[,1],pos[,2],circles = pos[,3])
symbols(pos[,1],pos[,2],circles = sqrt(abs(pos[,3])))
symbols(pos[,1],pos[,2],circles = sqrt(abs(pos[,3])))
sqrt(abs(pos[,3]))
pos<-plotvar[plotvar[,3]>0,]
max<-pos[,3]
symbols(pos[,1],pos[,2],circles = sqrt(abs(pos[,3]/max)))
max
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = sqrt(abs(pos[,3]/max)))
max
symbols(pos[,1],pos[,2],circles = sqrt(abs(pos[,3]/max)))
sqrt(abs(pos[,3]/max))
symbols(pos[,1],pos[,2],circles = 0.5*(abs(pos[,3]/(max)))
)
symbols(pos[,1],pos[,2],circles = 0.5*(abs(pos[,3]/(max)))
symbols(pos[,1],pos[,2],circles = 0.5*(abs(pos[,3]/(max))))
symbols(pos[,1],pos[,2],circles = 0.5*(abs(pos[,3]/(max))))
0.5*(abs(pos[,3]/(max)))
?square
?symbol
?symbola
?symbols
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))))
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,bg=1:N)
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,bg=1:2)
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE)
symbols(pos[,1],pos[,2],circles = 0.1*(abs(pos[,3]/(max))),inches = FALSE)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.1*(abs(pos[,3]/(max))),inches = FALSE)
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE)
pos<-plotvar[plotvar[,3]<0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],squares =  = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
max<-max(pos[,3])
max
pos
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE)
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
res
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,2],pos[,1],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Rows")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,2],pos[,1],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Rows")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
result$residuals
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot",col="blue"
)
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
result
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-max(pos[,3])
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
max<-max(abs(pos[,3]))
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
plot(result)
C1<-c(22.2,44.5,59.6,73.2,86.8)
C2<-c(10.5,15.5,29.0,36.5,46.2)
C3<-c(3.53,5.76,9.71,14.0,21.1)
C4<-c(1.04,1.98,2.45,3.40,5.40)
C5<-c(.641,.974,1.80,2.60,3.64)
mat<-cbind(C1,C2,C3,C4,C4)
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-sum(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
