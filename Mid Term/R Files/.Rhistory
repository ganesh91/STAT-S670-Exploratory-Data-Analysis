medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
overEffect<-c()
mat1<-mat
overall<-c()
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
temp<-median(currRowEffect)
overEffect<-overEffect+temp;
print(rowEffect<-(rowEffect+currRowEffect)-overEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
temp<-median(currcolEffect)
overEffect<-overEffect+temp;
print(colEffect<-(colEffect+currcolEffect)-overEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
50^-(1/5)
0.5*0.5
2*sqrt(pi)
1/3.54
(0.25*0.28)/332
((0.25*0.28)/332)*0.45
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
retColMedian<-function(mat){
n<-nrow(mat)
for(i in 1:ncol(mat)){
if(i==1){
med<-cbind(rep(median(mat[,i]),n))
}else{
#print(median(mat[,i]))
med<-cbind(med,rep(median(mat[,i]),n))
}
}
#print(med)
med
}
retRowMedian<-function(mat){
n<-ncol(mat)
for(i in 1:nrow(mat)){
if(i==1){
med<-rbind(rep(median(mat[i,]),n))
}else{
#print(median(mat[,i]))
med<-rbind(med,rep(median(mat[i,]),n))
}
}
#print(med)
med
}
subtractCol<-function(matrix,medianmat){
x<-matrix-medianmat
print(x)
x
}
medianPolishCol<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
}
mat1
}
medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
overEffect<-c()
mat1<-mat
overall<-c()
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
temp<-median(currRowEffect)
overEffect<-overEffect+temp;
print(rowEffect<-(rowEffect+currRowEffect)-overEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
temp<-median(currcolEffect)
overEffect<-overEffect+temp;
print(colEffect<-(colEffect+currcolEffect)-overEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
retColMedian<-function(mat){
n<-nrow(mat)
for(i in 1:ncol(mat)){
if(i==1){
med<-cbind(rep(median(mat[,i]),n))
}else{
#print(median(mat[,i]))
med<-cbind(med,rep(median(mat[,i]),n))
}
}
#print(med)
med
}
retRowMedian<-function(mat){
n<-ncol(mat)
for(i in 1:nrow(mat)){
if(i==1){
med<-rbind(rep(median(mat[i,]),n))
}else{
#print(median(mat[,i]))
med<-rbind(med,rep(median(mat[i,]),n))
}
}
#print(med)
med
}
subtractCol<-function(matrix,medianmat){
x<-matrix-medianmat
print(x)
x
}
medianPolishCol<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
}
mat1
}
medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
overEffect<-c()
mat1<-mat
overall<-c()
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
temp<-median(currRowEffect)
overEffect<-overEffect+temp;
print(rowEffect<-((rowEffect+currRowEffect)-overEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
temp<-median(currcolEffect)
overEffect<-overEffect+temp;
print(colEffect<-((colEffect+currcolEffect)-overEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
retColMedian<-function(mat){
n<-nrow(mat)
for(i in 1:ncol(mat)){
if(i==1){
med<-cbind(rep(median(mat[,i]),n))
}else{
#print(median(mat[,i]))
med<-cbind(med,rep(median(mat[,i]),n))
}
}
#print(med)
med
}
retRowMedian<-function(mat){
n<-ncol(mat)
for(i in 1:nrow(mat)){
if(i==1){
med<-rbind(rep(median(mat[i,]),n))
}else{
#print(median(mat[,i]))
med<-rbind(med,rep(median(mat[i,]),n))
}
}
#print(med)
med
}
subtractCol<-function(matrix,medianmat){
x<-matrix-medianmat
print(x)
x
}
medianPolishCol<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
}
mat1
}
medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
overEffect<-c()
mat1<-mat
overall<-c()
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
temp<-median(currRowEffect)
overEffect<-overEffect+temp;
print(rowEffect<-((rowEffect+currRowEffect)-overEffect))
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
temp<-median(currcolEffect)
overEffect<-overEffect+temp;
print(colEffect<-((colEffect+currcolEffect)-overEffect))
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
retColMedian<-function(mat){
n<-nrow(mat)
for(i in 1:ncol(mat)){
if(i==1){
med<-cbind(rep(median(mat[,i]),n))
}else{
#print(median(mat[,i]))
med<-cbind(med,rep(median(mat[,i]),n))
}
}
#print(med)
med
}
retRowMedian<-function(mat){
n<-ncol(mat)
for(i in 1:nrow(mat)){
if(i==1){
med<-rbind(rep(median(mat[i,]),n))
}else{
#print(median(mat[,i]))
med<-rbind(med,rep(median(mat[i,]),n))
}
}
#print(med)
med
}
subtractCol<-function(matrix,medianmat){
x<-matrix-medianmat
print(x)
x
}
medianPolishCol<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
mat1<-mat
for(i in 1:n){
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
print(colEffect<-colEffect+currcolEffect)
mat1<-subtractCol(mat1,retColMedian(mat1))
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
print(rowEffect<-rowEffect+currRowEffect)
mat1<-subtractCol(mat1,retRowMedian(mat1))
}
mat1
}
medianPolishRow<-function(mat,n){
rowEffect<-cbind(c(rep(0,nrow(mat))))
colEffect<-rbind(c(rep(0,ncol(mat))))
overEffect<-c()
mat1<-mat
overall<-0
for(i in 1:n){
row<-retRowMedian(mat1)
print(currRowEffect<-cbind(row[,1]))
temp<-median(currRowEffect)
overEffect<-overEffect+temp;
print(rowEffect<-((rowEffect+currRowEffect)-overEffect))
mat1<-subtractCol(mat1,retRowMedian(mat1))
col<-retColMedian(mat1)
print(currcolEffect<-rbind(col[1,]))
temp<-median(currcolEffect)
overEffect<-overEffect+temp;
print(colEffect<-((colEffect+currcolEffect)-overEffect))
mat1<-subtractCol(mat1,retColMedian(mat1))
}
mat1
}
lv<-medianPolishRow(mat,2)
stem(c(lv),2)
twoway.median2 <- function(mat){ # first column then row
meff.MP <- median(mat)
beff.MP <- apply(mat,2,median,na.rm=T)  # column medians
mat.res <- mat - matrix(rep(beff.MP,each=nrow(mat)),byrow=F,nrow=nrow(mat));
aeff.MP <- apply(mat.res,1,median,na.rm=T) # row effect
beff.MP <- beff.MP - median(beff.MP)  # column effect
res.MP <- mat.res - matrix(rep(aeff.MP,each=ncol(mat)),byrow=T,ncol=ncol(mat))
list(overall=meff.MP, row=aeff.MP, col=beff.MP, res=res.MP)
}
lv1<-twoway.median2(mat)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
lv1<-twoway.median2(mat)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
twoway.median2 <- function(mat){ # first column then row
meff.MP <- median(mat)
beff.MP <- apply(mat,2,median,na.rm=T)  # column medians
mat.res <- mat - matrix(rep(beff.MP,each=nrow(mat)),byrow=F,nrow=nrow(mat));
aeff.MP <- apply(mat.res,1,median,na.rm=T) # row effect
beff.MP <- beff.MP - median(beff.MP)  # column effect
res.MP <- mat.res - matrix(rep(aeff.MP,each=ncol(mat)),byrow=T,ncol=ncol(mat))
list(overall=meff.MP, row=aeff.MP, col=beff.MP, res=res.MP)
}
lv1<-twoway.median2(mat)
lv1
lv2<-twoway.median2(lv1$res)
lv2
stem(c(lv),2)
stem(c(lv2$res),2)
c1<-c(25.3,32.1,38.8,25.4)
c2<-c(25.3,29.1,31.0,21.1)
c3<-c(18.2,18.8,19.3,20.3)
c4<-c(18.3,24.3,15.7,24.0)
c5<-c(16.3,19.0,16.8,17.5)
mat<-cbind(c1,c2,c3,c4,c5)
twoway.median2 <- function(mat){ # first column then row
meff.MP <- median(mat)
beff.MP <- apply(mat,2,median,na.rm=T)  # column medians
mat.res <- mat - matrix(rep(beff.MP,each=nrow(mat)),byrow=F,nrow=nrow(mat));
aeff.MP <- apply(mat.res,1,median,na.rm=T) # row effect
beff.MP <- beff.MP - median(beff.MP)  # column effect
res.MP <- mat.res - matrix(rep(aeff.MP,each=ncol(mat)),byrow=T,ncol=ncol(mat))
list(overall=meff.MP, row=aeff.MP, col=beff.MP, res=res.MP)
}
lv1<-twoway.median2(mat)
lv1
lv2<-twoway.median2(lv1$res)
lv2
stem(c(lv2$res),2)
diag.MP <- function(fit){
fit.comp <- matrix(fit$row,ncol=1) %*% matrix(fit$col,nrow=1)/fit$overall
plot(fit.comp, fit$res,xlab="Comparison value",ylab="Residual",cex=0.5)
abline(v=0,h=0,lty=2)
ls <- lm(c(fit$res)~c(fit.comp))
abline(ls,col="red",lty=3)
rr <- run.rrline(fit.comp,fit$res,iter=10)
abline(rr$a, rr$b, col="red")
pwr1 <- 1 - rr$b
pwr2 <- 1 - ls$coef[2]
title("",paste("Approximate power =",format(round(pwr1,2))," or ", format(round(pwr2,2))))
}
symbolPlot<-function(mat){
result<-medpolish(mat)
res<-c(result$residuals)
genNos<-expand.grid(1:5,1:5)
plotvar<-cbind(genNos$Var2,genNos$Var1,res)
pos<-plotvar[plotvar[,3]>=0,]
max<-sum(abs(pos[,3]))
symbols(pos[,1],pos[,2],squares = 0.2*(abs(pos[,3]/(max))),inches = FALSE,xlab="Columns",ylab="Rows",main="Symbol Plot")
pos<-plotvar[plotvar[,3]<0,]
symbols(pos[,1],pos[,2],circles = 0.2*(abs(pos[,3]/(max))),inches = FALSE,add = TRUE)
}
libary(ggplot2)
setwd("C:/Users/Ganesh/Google Drive/Courses/STAT S 670/Mid Term/R Files")
cv = function(x, y, lam)
{
n = length(x)
cv=numeric(n)
for(i in 1:n)
{
fit = ksmooth(x[-i], y[-i], kernel = "normal", bandwidth = lam, n.points = n)
cv[i] = (y[i] - fit$y[i])^(2)
}
return(mean(cv))
}
plot_cv = function(x, y)
{
lam = seq(0.01, 1, by = 0.01)
cv3 = c()
for(i in 1:length(lam))
{
cv2 = cv(x, y, lam[i])
cv3 = c(cv3, cv2)
}
plot(lam, cv3)
lam_min = lam[which.min(cv3)]
return(lam_min)
}
plot_ksmooth = function(x, y, mu, method)
{
lam = c(0.1, 0.3, 0.5, 0.7, 0.9)
col = c("green", "red", "blue", "orange", "brown")
curve(mu(x), 0, 1)
points(x, y)
for(i in 1:length(lam))
{
fit = ksmooth(x, y, kernel = method, bandwidth = lam[i])
lines(fit$x, fit$y, lty = 4, col = col[i])
}
}
x = seq(0.01, 0.99, by = 0.02)
y = c(-.0937, .0247, .1856, .1620, -.0316, .1442, .0993, .3823, -.0624, .3262, .1271, -.4158, .0975, -.0836, .7410, .3749, .4446, .5432, .6946, .5869, .9384, .7647, .9478, .9134, 1.2437, .9070, 1.2289, .9638, .8834, .6982, .5729, .7160, 1.0083, .6681, .5964, .4759, .6217, .6221, .6244, .5918, .7047, .5234, .9022, .9930, .8045, .7858, 1.1939, .9272, .8832, .9751)
#plot(x, y, col = "violet")
mu = function(t){t + 0.5 *exp(-50*(t-0.5)^2)}
u = expression(t + 0.5 *exp(-50*(t-0.5)^2))
curve(mu(x), 0, 1)
points(x, y)
# part b
plot_ksmooth(x, y, mu, "box")
plot_ksmooth(x, y, mu, "normal")
# part c
lam_min = plot_cv(x, y)
curve(mu(x), 0, 1)
points(x, y)
best_fit = ksmooth(x, y, kernel = "normal", bandwidth = lam_min)
lines(best_fit$x, best_fit$y, col = "red")
# part e
sfit = smooth.spline(x,y,cv=TRUE)
knots = sfit$fit$knot
# knots has several phantom knots
# at the boundary values of 0 and 1
uniqueknots = unique(knots)
library("fda")
# to creat the X matrix you can use
X = bsplineS(x,breaks=uniqueknots)
# Or you can use
X=splineDesign(knots,x)
# regression coefficients are
beta = sfit$fit$coef
# you can get the approximate smoothness penalty matrix
# by using
B=create.bspline.basis(breaks=uniqueknots)
Omega=bsplinepen(B)
# Smoothing parameter is
lambda = sfit$lambda
# We can compute the Hat matrix by
#first inverting the matrix
T=(t(X)%*%X+lambda*Omega)
# Since T is a banded matrix this can be accomplished
# efficiently using
C= chol(T)
Tinv = chol2inv(C)
# Hat matrix is
S = X %*% Tinv %*% t(X)
# compare the sum of the diagonal of S with
df = sfit$df
df1 = sum(diag(S))
# Regression coefficients are
betahat = Tinv %*% t(X) %*% y
# compare this to beta and you'll see they are close
# the difference that are present maybe due to
# slight differences in Omega
?smooth.spline
?plot
?legend
