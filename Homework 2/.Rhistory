nrow(1:10)
length(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[floor(medianIndex+/2)]+nList[ceiling(medianIndex/2)])/2
upperspread<-(nList[floor((medianIndex/2)+(medianIndex))]+nList[ceiling((medianIndex/2)+(medianIndex))])/2
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[((medianIndex/2)+medianIndex)+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[floor(medianIndex+/2)]+nList[ceiling(medianIndex/2)])/2
upperspread<-(nList[floor((medianIndex/2)+(medianIndex))]+nList[ceiling((medianIndex/2)+(medianIndex))])/2
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[((medianIndex/2)+medianIndex)+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[floor(medianIndex/2)]+nList[ceiling(medianIndex/2)])/2
upperspread<-(nList[floor((medianIndex/2)+(medianIndex))]+nList[ceiling((medianIndex/2)+(medianIndex))])/2
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[((medianIndex/2)+medianIndex)+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
lval(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[floor(medianIndex/2)]+nList[ceiling(medianIndex/2)])/2
upperspread<-(nList[floor((medianIndex/2)+(medianIndex))]+nList[ceiling((medianIndex/2)+(medianIndex))])/2
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)]
upperspread<-nList[((medianIndex/2)+medianIndex)]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
lval(1:10)
lval(1:9)
findSpread(1:10)
findSpread(1:9)
length(1:9)
length(1:10)
findSpread(1:9)
findSpread(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[floor(medianIndex/2)]+nList[ceiling(medianIndex/2)])/2
upperspread<-(nList[floor((medianIndex/2)+(medianIndex))]+nList[ceiling((medianIndex/2)+(medianIndex))])/2
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)]
upperspread<-nList[((medianIndex/2)+medianIndex)]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
findSpread(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2)])
upperspread<-(nList[medianLength-lowerspread+1)
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)]
upperspread<-nList[medianLength-lowerspread]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1)
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)]
upperspread<-nList[medianLength-lowerspread]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)]
upperspread<-nList[medianLength-lowerspread]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
findSpread(1:9)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex+1)/2]
upperspread<-nList[medianLength-lowerspread]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
lval(inPop)
findSpread(inPop)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(inPop)
findSpread(1:9)
findSpread(1:11)
lval(1:11)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)/2])
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
lval(1:10)
lval(1:11)
findSpread(1:11)
lval(1:10)
findSpread(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
lowerspread<-(nList[(medianIndex+1)]+nList[(medianIndex)])/2
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is even")
lowerspread<-(nList[(medianIndex+1)]+nList[(medianIndex)])/2
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
lowerspread<-nList[(medianIndex/2)+1]
upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
lval(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is even")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/])/2
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
# lowerspread<-nList[(medianIndex/2)+1]
#  upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is even")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/2])/2
upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
# lowerspread<-nList[(medianIndex/2)+1]
#  upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
lval(1:10)
findSpread(1:10)
findSpread(1:9)
lowerspread<-nList[(medianIndex/2)]
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is odd")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/2])/2
#upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
print("the number is ")
lowerspread<-nList[(medianIndex/2)]
#  upperspread<-nList[medianLength-lowerspread+1]
}
print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is odd")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/2])/2
#upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
print("the number is ")
lowerspread<-nList[(medianIndex/2)]
#  upperspread<-nList[medianLength-lowerspread+1]
}
#print(upperspread)
#print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:10)
findSpread(1:9)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is odd")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/2])/2
#upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
print("the number is ")
lowerspread<-nList[(medianIndex/2)]
#  upperspread<-nList[medianLength-lowerspread+1]
}
#print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
findSpread <- function(nList){
#nList<-1:10
medianLength <- length(nList)
medianIndex <- floor(medianLength/2)
upperspread <- as.numeric()
lowerspread <- as.numeric()
#calculate Fl
cond <- (medianIndex/2)-floor(medianIndex/2)
print(cond)
if (cond > 0){
#calculate fu eeven
print("the number is odd")
lowerspread<-(nList[(medianIndex+1)/2]+nList[(medianIndex)/2])/2
#upperspread<-(nList[medianLength-lowerspread+1])
}else{
#calculate fl odd
print("the number is ")
lowerspread<-nList[(medianIndex+1)/2]
#  upperspread<-nList[medianLength-lowerspread+1]
}
#print(upperspread)
print(lowerspread)
return(upperspread-lowerspread)
}
findSpread(1:9)
