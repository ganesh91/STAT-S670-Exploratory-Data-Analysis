ltheta=30, ticktype = "detailed",zlab = "z",
main = "Perspective Plot for cos(x)sin(y)")
#plot(x,y,type = "l")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3d(1:10,1:10)
?outer
x<- 1:10; y<- 1:15; z<- outer( x,y,"+")
image.plot(x,y,z)
image.plot
F = deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
F(0,0)
names(F)
View(`F`)
View(`F`)
View(`F`)
f
F
F(1:10,1:10)
install.packages("fields")
image.plot(1:10,1:10,1:10)
library(fields)
image.plot(1:10,1:10,1:10)
?image.plot(1,1,1)
image.plot(1,1,1)
x<-1:10
y<-1:10
outer(x,y,sin(x)*cos(y))
z<-outer(x,y,~sin(x)*cos(y))
biVariate <- function(x,y) {cos(x)*sin(y)}
z<-outer(x,y,bivariate)
z<-outer(x,y,biVariate)
image.plot(x,y,z)
F(1:10,1:10)
df <- F(1:10,1:10)
names(df)
F(1:10,1:10)[,"x"]
F(1:10,1:10)["x",]
F(1:10,1:10)["x"]
F(1:10,1:10)
F(1:10,1:10).attr("",gradient)
F()
F
F(1:10,1:10).grad[,"x"]
F(1:10,1:10).grad[,"x"]
Fdf <- as.data.frame(F(1:10,1:10))
Fdf
eval(F)
df
df
df
df
df$x
df[,"x"]
df[,]
df[1,]
df[[1]]
df[[1,]]
df[[1,],]
df[[1],]
df[[1]]
df[[2]]
df
group
dim(df)
summary(df)
df
F(1:10,1:10)
F(1:10,1:10).
attr(F(1:10,1:10))
attr(F(1:10,1:10),2)
attributes(df)
attr(F(1:10,1:10),2)$gradient
attributes(df)$gradient
df1<- as.data.frame(attributes(df)$gradient)
arrows(1,1,df1[1,1],df1[2,1])
arrows(8,9,df1[1,8],df1[2,8])
arrows(8,9,df1[8,1],df1[8,2])
arrows(8,9,df1[8,1],df1[8,2],length = 1)
arrows(8,9,df1[8,1],df1[8,2],length = 0.5)
arrow(2,8,2+0.5,2+0.8)
arrow(2,8,2+0.5,2+0.8)
arrow(2,8,2+0.5,8+0.8)
df1
arrows(2,8,2+0.5,8+0.8)
outer(1:10,1:10)
expand.grid(1:10,1:10)
a<-expand.grid(1:10,1:10)
a
class(a)
names(a)
names(a) <- c("x,"y"")
a <- names("x,"y"")
image.plot(x,y,biVariate)
image.plot(x,y,plotMatrix)
#Program 1
#Author: Ganesh Nagarajan
#Plots the perspective plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
#par(mfrow=c(1,2))
image.plot(x,y,plotMatrix)
}
else{
print("The size of the vectors don't match each other")
}
}
plot3d(1:10,1:10)
plot3d(20:30,1:10)
plot3d(21:30,1:10)
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-derivBiVariate(xVector,yVector)$gradient
arrows(xVector,yVector,xVector+gradient$x,xVector+gradient$y)
}
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-attributes(derivBiVariate(xVector,yVector))$gradient
arrows(xVector,yVector,xVector+gradient$x,xVector+gradient$y)
}
plot3dDerivative(21:30,1:10)
View(derivBiVariate)
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-attributes(derivBiVariate(xVector,yVector))$gradient
arrows(xVector,yVector,xVector+gradient$x,xVector+gradient$y)
gradient<-attributes(derivBiVariate(1:0,1:10))$gradient
gradient
gradient$x
gradient<-as.data.frame(attributes(derivBiVariate(1:0,1:10))$gradient)
gradient$x
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,xVector+gradient$y)
}
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,xVector+gradient$y,length = 1)
}
plot3dDerivative(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 1)
}
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.5)
}
plot3dDerivative(21:30,1:10)
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.5,arr.type="circle")
}
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.5,width=0.5)
}
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.5,code = 2,arr.width=2)
}
plot3dDerivative(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.5,lwd=3)
}
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,)
}
plot3dDerivative(21:30,1:10)
plot3d(21:30,1:10)
plot3dDerivative(21:30,1:10)
plot3d(1:5,1:5)
plot3d(1:2,1:2)
plot3d(1:5,1:5)
plot3dDerivative(1:5,1:5)
plot3d(1:5,1:5)
> plot3dDerivative(1:5,1:5)
plot3d(1:5,1:5)plot3dDerivative(1:5,1:5)
#Program 1
#Author: Ganesh Nagarajan
#Plots the perspective plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
#par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "")
}
plot3d(1:5,1:5)
plot3dDerivative(1:5,1:5)
plot3dDerivative(1:5,1:5)
#Program 1
#Author: Ganesh Nagarajan
#Plots the perspective plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
#par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3dDerivative(1:5,1:5)
set.seed(100)
dataSet1 <- rgamma(1000,shape = 1)
dataSet2 <- rgamma(1000,shape = 50)
#Draw the exact density function using curve.
hist(dataSet1,freq=F,ylim =  0+c(0,1),
main="Exact Density of DS1",xlab = "DS1")
curve(dnorm(x,mean=mean(dataSet1),sd=sd(dataSet1)),
0,4,add=T,col="blue")
hist(dataSet2,freq=F,ylim =  0+c(0,0.06),
main="Exact Density of DS2",xlab = "DS2")
curve(dnorm(x,mean=mean(dataSet2),sd=sd(dataSet2)),
0,100,add=T,col="blue")
set.seed(100)
dataSet1 <- rgamma(1000,shape = 1)
dataSet2 <- rgamma(1000,shape = 50)
#Draw the exact density function using curve.
hist(dataSet1,freq=F,ylim =  0+c(0,1),
main="Exact Density of DS1",xlab = "DS1")
curve(dgamma(x,1),
0,4,add=T,col="blue")
hist(dataSet2,freq=F,ylim =  0+c(0,0.06),
main="Exact Density of DS2",xlab = "DS2")
curve(dgamma(x,50),
0,100,add=T,col="blue")
#Program 1
#Author: Ganesh Nagarajan
#Plots the image plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
filled.contour(z,y,plotMatrix,main="Contour plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3d(1:5,1:5)
#Program 1
#Author: Ganesh Nagarajan
#Plots the image plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
filled.contour(x,y,plotMatrix,main="Contour plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3d(1:5,1:5)
plot3d(1:5,1:5)
par(mfrow=c(1,2))
#Program 1
#Author: Ganesh Nagarajan
#Plots the image plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
filled.contour(x,y,plotMatrix,main="Contour plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3d(1:5,1:5)
plot3dDerivative(1:5,1:5)
#Program 1
#Author: Ganesh Nagarajan
#Plots the image plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
contour(x,y,plotMatrix,main="Contour plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3d(1:5,1:5)
plot3d(1:10,1:10)
#Program 1
#Author: Ganesh Nagarajan
#Plots the image plot of function defined in bivariate.
library(fields)
biVariate <- function(x,y) {cos(x)*sin(y)}
plot3d <- function(xVector,yVector){
x <- xVector
y <- yVector
if (length(x) == length(y)){
plotMatrix <- outer(x,y,biVariate)
#Replace all NaS in Plot Martix with Zeroes
plotMatrix[is.na(plotMatrix)]<-0
#Draw the Image Plot
par(mfrow=c(1,2))
image.plot(x,y,plotMatrix,main="Image plot")
contour(x,y,plotMatrix,main="Contour plot")
}
else{
print("The size of the vectors don't match each other")
}
}
plot3dDerivative<- function(xVector,yVector){
plotMatrix <- outer(xVector,yVector,biVariate)
image.plot(xVector,yVector,plotMatrix,main="Image plot")
derivBiVariate <- deriv(~sin(x)*cos(y),  c("x","y"),function(x,y){})
gradient<-as.data.frame(attributes(derivBiVariate(xVector,yVector))$gradient)
arrows(xVector,yVector,xVector+gradient$x,yVector+gradient$y,length = 0.25,col = "red")
}
plot3dDerivative(1:10,1:10)
plot3dDerivative(1:10,1:10)
dataSet <- c(0.12,0.15,0.15,0.10,0.13,0.15,0.14,
0.08,0.11,0.09,0.14,0.09,0.13,0.14,
0.12,0.16,0.15,0.13,0.12,0.12,0.09)
length(dataSet)
2*sqrt(21)
round(2*sqrt(21))
stemleafplot<- function(listArray,scale){
sortedArray <- sort(listArray)
minArray <- min(listArray)
maxArray <- max(listArray)
count <- nrow(length)
stem(listArray,scale)
}
stemleafplot(dataSet,0.25)
stemleafplot(dataSet,0.5)
stemleafplot(dataSet,1)
hist(dataSet1,main = "Kernel Distribution Functions",
xlab = "Data Set 1",prob = 1)
lines(density(dataSet1,kernel = "gaussian"),col = 2,cex = 0.5)
lines(density(dataSet1,kernel = "rectangular"),col = 3,cex = 0.5)
lines(density(dataSet1,kernel = "triangular"),col = 4,cex = 0.5)
curve(dgamma(x,1),0,4,add=T,col="blue")
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact DEnsity"),
col = c(2,3,4),lty = 1
)
hist(dataSet1,main = "Kernel Distribution Functions",
xlab = "Data Set 1",prob = 1)
lines(density(dataSet1,kernel = "gaussian"),col = 2,cex = 0.5)
lines(density(dataSet1,kernel = "rectangular"),col = 3,cex = 0.5)
lines(density(dataSet1,kernel = "triangular"),col = 4,cex = 0.5)
curve(dgamma(x,1),0,4,add=T,col="5")
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact DEnsity"),
col = c(2,3,4,5),lty = 1
)
hist(dataSet1,main = "Kernel Distribution Functions",
xlab = "Data Set 1",prob = 1)
lines(density(dataSet1,kernel = "gaussian"),col = 2,cex = 0.5)
lines(density(dataSet1,kernel = "rectangular"),col = 3,cex = 0.5)
lines(density(dataSet1,kernel = "triangular"),col = 4,cex = 0.5)
curve(dgamma(x,1),0,4,add=T,col="5")
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact Density"),
col = c(2,3,4,5),lty = 1
)
hist(dataSet1,main = "Kernel Distribution Functions",
xlab = "Data Set 1",prob = 1)
lines(density(dataSet1,kernel = "gaussian"),col = 2,cex = 0.5)
lines(density(dataSet1,kernel = "rectangular"),col = 3,cex = 0.5)
lines(density(dataSet1,kernel = "triangular"),col = 4,cex = 0.5)
curve(dgamma(x,1),0,4,add=T,col="6")
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact Density"),
col = c(2,3,4,6),lty = 1
)
hist(dataSet2,main = "Kernel Distribution Functions",
xlab = "Data Set 2",prob = 1)
lines(density(dataSet2,kernel = "gaussian"),col = 2)
lines(density(dataSet2,kernel = "rectangular"),col = 3)
lines(density(dataSet2,kernel = "triangular"),col = 4)
curve(dgamma(x,50),0,100,add=T,col=6)
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact Density"),
col = c(2,3,4,6),lty = 1
)
hist(dataSet2,main = "Kernel Distribution Functions",
xlab = "Data Set 2",prob = 1)
lines(density(dataSet2,kernel = "gaussian"),col = 2)
lines(density(dataSet2,kernel = "rectangular"),col = 3)
lines(density(dataSet2,kernel = "triangular"),col = 4)
curve(dgamma(x,50),0,100,add=T,col=6)
legend(
"topright",legend = c("Gaussian","Rectangular","Triangular","Exact Density"),
col = c(2,3,4,6),lty = 1,cex = 0.5)
