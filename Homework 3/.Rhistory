rect(j-wid[k-1], lfourth, j+wid[k-1], ufourth, col="grey")
segments(j-.49, med, j+.49, med)  # line for median
out <- (x < lower.adj) | (x > upper.adj)
points(rep(j,sum(out)),x[out])
segments(j,lfourth,j,lower.adj,lty=2)
segments(j,ufourth,j,upper.adj,lty=2)
}
}
else {
# out <- (x < min(lfence, qu[1])) | (x > max(ufence, qu[2*k]))
out <- (x < qu[1]) | (x > qu[2*k])
points(rep(j,sum(out)),x[out])
for (i in 1:k)
rect(j-wid[i], qu[i], j+wid[i], qu[2*k-i+1], col="grey")
}
}
}
qqnormLV <- function(y, main="Normal QQ Plot (LVs)",
xlab="theoretical letter values",
ylab="sample letter values", plot.it = TRUE, ...) {
# QQ plot on letter values only (Karen Kafadar, 2006)
lv.out <- lval(y[!is.na(y)])
n <- length(y[!is.na(y)])
yLV <- c(rev(lv.out[,2]),lv.out[-1,3])
zLV <- qnorm((c(rev(lv.out[,1]),n+1-lv.out[-1,1]) - 1/3)/(n+1/3))
plot(zLV,yLV,main=main, xlab=xlab, ylab=ylab)
# slope of line through 1st & 3rd quartiles:
slope.lv <- (lv.out[2,3]-lv.out[2,2])/1.349
int.lv <- lv.out[2,3] - slope.lv*.6745
abline(int.lv,slope.lv)
if(!plot.it) list(x = zLV, y=yLV)
}
plot.sym <- function(x) {
# Plot for transformations for symmetry UREDA Sec 4C, p.105
# Note: if the plot is not straight, transform x and try again
y <- x[!is.na(x)]
ll <- lval(y)
mm <- ll[1,2]  # median
m <- nrow(ll)
xx <- ( (ll[2:m,3]-mm)^2 + (mm-ll[2:m,2])^2 )/(4*mm)
yy <- ( ll[2:m,3] + ll[2:m,2] )/2 - mm
plot(xx,yy)
rr <- lm(yy ~ xx)
print(rr$coef)
abline(rr)
pwr <- 1 - rr$coef[2]
title("",paste("Approximate power =",format(round(pwr,2))))
}
z<-cbind(1:10,1:10)
lvplot(z)
lvplot(z,2)
lvplot(z,3)
lvplot(z,1)
lvplot(z)
df1
df1[2:3]
z<-df1[2:3]
lvplot(z)
lvplot(z$value)
A<-c(19.50,16.72,20.92,16.42,21.22,15.40,20.68,14.55,20.23,
15.11,20.95,16.68,14.67,16.50,22.15,20.14,18.33,14.20,
11.61,22.24,18.75,14.22,15.03,22.07,13.34,12.73,19.23,
19.74,19.74,20.60,19.29,18.22,23.65,17.44,13.07,19.00,
18.44,17.25,19.19,12.77,14.10,16.69,16.92,21.92,20.84,
18.43,19.54,23.61,21.40,28.34,20.43,20.43,15.58,16.58,
22.44,14.59,18.70,16.79,14.12,13.67,15.94,24.04,15.42,
16.26,17.74,12.37,16.87,16.28,17.97,19.56,13.56,16.13,
18.20,17.29,19.38,20.47,16.75,16.69,15.93,14.73,17.83,
19.78,15.78,16.17,17.18,13.90,15.33,16.10,12.03,17.92,
23.56,11.35,19.10,12.91,18.32,19.24,11.57,14.33,13.60,
13.12,11.19,14.33,16.91,13.03,17.32,10.70,12.56,16.04)
lvplot(A)
oar(mfrow=c(2,1))
par(mfrow=c(2,1))
lvplot(A)
par(mfrow=c(1,2))
lvplot(A)
hist(A)
curve(density(A))
curve(density(A))
curve(density(A,adjust = "gaussian"))
curve(density(A,adjust = "gaussian"))
density(A,adjust = "gaussian")
density(A,kerel = "gaussian")
density(A)
curve(density(A))
plot(density(A))
lines(density(A))
density(A)
plot(density(A))
hist(A)
curve(density(A))
lines(density(A))
lines(density(A,kernel = "gaussian"))
hist(A,freq=F)
lines(density(A,kernel = "gaussian"))
par(mdfrow=c(2,1))
par(mfrow=c(2,1))
lvplot(A)
par(mfrow=c(1,2))
hist(A,freq=F)
lines(density(A,kernel = "gaussian"))
lvplot(A)
?boxplot
boxplot(A,notch = true)
boxplot(A,notch = TRUE)
updateR()
updater()
library(installR)
library(installr)
install.packages("installr")
install.packages("installr")
install.packages("installr")
q()
library(updater)
library(updateR)
library(installR)
library(installr)
installR()
updateR()
q()
rgamma(n = 1000,shape=-1)
hist(rgamma(n = 1000,shape=-1))
hist(rgamma(n = 1000,shape=1))
hist(rgamma(n = 1000,shape=0.1))
hist(rgamma(n = 1000,shape=1000))
hist(rgamma(n = 1000,shape=100000000))
lapply
lapply(1:10,e^x)
lapply(1:10,x^x)
x <- sample(1:100000000000,1000)
x <- sample(1:100000,1000)
sqrt(1000)
install.packages("RMySQL")
install.packages("dplyr")
?fetch
library(dplyr)
library(RMySQL)
library(ggplot2)
library(dplyr)
library(RMySQL)
library(ggplot2)
?"fetch"
con <- dbConnect(MySQL(), user="apps", password="", dbname="test", host="localhost")
rs <- dbSendQuery(con, "select * from chicagocrimes where year > 2011 and Community_Area is not null;")
data <- fetch(rs, n=-1)
huh <- dbHasCompleted(rs)
dbClearResult(rs)
dbDisconnect(con)
data$Year<-as.factor(data$Year)
data$Community_Area<-as.factor(data$Community_Area)
gplot(count(Primary_Type))~year,data=data)
gplot(count(Primary_Type)),year,data=data)
gplot(count(Primary_Type)~year,data=data)
qplot(count(Primary_Type)~year,data=data)
qplot(count(Primary_Type),year,data=data)
View(data)
dataSet<-data
rm(data)
plot(dataset)
plot(dataSet)
qplot(data=dataSet,x = Primary_Type,y=year)
qplot(data=dataSet,x = Primary_Type,y=Year)
qplot(data=dataSet,x = count(Primary_Type),y=year)
qplot(data=dataSet,x = count(Primary_Type),y=year,group=year)
qplot(data=dataSet,x = count(Primary_Type),y=year,group=Year)
library(ggplot2)
ggplot
View(midwest)
remove(midwest)
remove(ggplot2.midwest)
rm(midwest)
rm(ggplot2.midwest)
rm(ggplot2:.midwest)
rm(ggplot2:midwest)
diamonds
d <- ggplot(diamonds,
aes(x=carat, y=price))
d + geom_point()
d + geom_point(aes(colour = carat))
d + geom_point(aes(colour = carat))
+ scale_colour_brewer()
ggplot(diamonds) +
geom_histogram(aes(x=price))
ggplot(diamonds) +
geom_histogram(aes(x=price))+theme_bw()
b<-rgamma(1000,shape = 1)
setwd("C:/Documents and Settings/Ganesh/")
setwd("C:/Users/Ganesh/Google Drive/Courses/STAT S 670/Homework 3")
source("lvalprogs.r")
lval(b)
boxplot(b)
hist(b)
boxplot(log10(b))
hist(log10(b))
source("plotTransformBatch.R")
plotTransformBatch(b)
plotTransformBatch(b^0.5)
plotTransformBatch(b^0.5)
plotTransformBatch(b^2)
plotTransformBatch(b^3)
plotTransformBatch(b^4)
plotTransformBatch(log10(b))
plotTransformBatch(b/2)
plotTransformBatch(b/3)
plotTransformBatch(b/4)
plotTransformBatch(b^-1)
plotTransformBatch(b^-0.5)
plotTransformBatch(b^-1)
hist(b^0.5)
hist(b^0.7)
hist(b^0.25)
hist(b^0.30)
hist(b^0.35)
hist(b^0.3)
curve(density(b^0.3,kernel = "gaussian"))
curve(density((b^0.3),kernel = "gaussian"))
density((b^0.3),kernel = "gaussian")
lines(density((b^0.3),kernel = "gaussian"))
hist(b^0.3,freq = false)
hist(b^0.3,probability = TRUE)
lines(density((b^0.3),kernel = "gaussian"))
z<-1:10
y<-1:10
plot(y,z)
lm(y~z)
a=lm(y~z)
abline(a)
attributes(a)
attributes(a)$names
attributes(a)$names[2]
a$residuals
round(a$residuals)
b<-rnorm(100,0,10)
plot(b)
c<-1:100
plot(b,c)
plot(c,b)
b
c
plot(c,b)
host(b)
hist(b)
rlm
library(MASS)
library(foreign)
rlm
summary(1:10)
v<-c(1,2,3,4,5,4,3,2,1)
hist(v)
lval(v)
library(noncensus)
data(counties)
findSpread <- function(nList){
sortedInput<-sort(nList)
medianFlg<-(1+length(sortedInput))/2
median <- ifelse(medianFlg==floor(medianFlg),sortedInput[medianFlg],(sortedInput[medianFlg-0.5]+sortedInput[medianFlg+0.5])/2)
#print(median)
flFlg<-(1+floor(medianFlg))/2
fl<-ifelse(flFlg==floor(flFlg),sortedInput[flFlg],(sortedInput[flFlg-0.5]+sortedInput[flFlg+0.5]/2))
#print(fl)
fuFlg<-length(sortedInput)-flFlg+1
fu<-ifelse(fuFlg==floor(fuFlg),sortedInput[fuFlg],(sortedInput[fuFlg-0.5]+sortedInput[fuFlg+0.5]/2))
#print(fu)
return(fu-fl)
}
states <- levels(counties$state)
medianDS <- as.numeric()
spreadDS <- as.numeric()
for (i in states){
inState <- subset(counties,state==i)
inPop <- sort(inState$population[!is.na(inState$population)])
median <- median(inState$population)
medianDS <- c(medianDS,median)
spread <- findSpread(inPop)
spreadDS <- c(spreadDS,spread)
}
statesSpread <- cbind.data.frame(states,medianDS,spreadDS)
statesSpread <- statesSpread[complete.cases(statesSpread),]
statesSpread <- subset(statesSpread,medianDS>0 & spreadDS >0)
statesSpread
subset(statesSpread,state!=c("PR","GU","VI"))
subset(statesSpread,states!=c("PR","GU","VI"))
statesSpread[statesSpread$states %!in% c("PR","GU","VI")]
statesSpread[statesSpread$states %!in% c("PR","GU","VI")]
install.packages("operators")
library(operators)
statesSpread[statesSpread$states %!in% c("PR","GU","VI")]
statesSpread[statesSpread$states %!in% c("PR","GU","VI"),]
statesSpread<-statesSpread[statesSpread$states %!in% c("PR","GU","VI"),]
plot(statesSpread$medianDS,statesSpread$spreadDS)
b<-lm(statesSpread$spreadDS,statesSpread$medianDS)
b<-lm(statesSpread$spreadDS~statesSpread$medianDS)
abline(b)
plot(log10(statesSpread$medianDS),log10(statesSpread$spreadDS))
b<-lm(log10(statesSpread$spreadDS)~log10(statesSpread$medianDS))
plot(log10(statesSpread$medianDS),log10(statesSpread$spreadDS))
abline(b)
install.packages(c("evaluate", "formatR", "highr", "maps", "RcppEigen"))
order(1:10)
order(10:1)
q0:1
10:1
a<-10:1
a[order(a)]
library(noncensus)
data(counties)
findSpread <- function(nList){
sortedInput<-sort(nList)
medianFlg<-(1+length(sortedInput))/2
median <- ifelse(medianFlg==floor(medianFlg),sortedInput[medianFlg],(sortedInput[medianFlg-0.5]+sortedInput[medianFlg+0.5])/2)
#print(median)
flFlg<-(1+floor(medianFlg))/2
fl<-ifelse(flFlg==floor(flFlg),sortedInput[flFlg],(sortedInput[flFlg-0.5]+sortedInput[flFlg+0.5]/2))
#print(fl)
fuFlg<-length(sortedInput)-flFlg+1
fu<-ifelse(fuFlg==floor(fuFlg),sortedInput[fuFlg],(sortedInput[fuFlg-0.5]+sortedInput[fuFlg+0.5]/2))
#print(fu)
return(fu-fl)
}
states <- levels(counties$state)
medianDS <- as.numeric()
spreadDS <- as.numeric()
for (i in states){
inState <- subset(counties,state==i)
inPop <- sort(inState$population[!is.na(inState$population)])
median <- median(inState$population)
medianDS <- c(medianDS,median)
spread <- findSpread(inPop)
spreadDS <- c(spreadDS,spread)
}
statesSpread <- cbind.data.frame(states,medianDS,spreadDS)
statesSpread <- statesSpread[complete.cases(statesSpread),]
statesSpread <- subset(statesSpread,medianDS>0 & spreadDS >0)
statesSpread[statesSpread$states %!in% c("PR","GU","VI"),]
plot(statesSpread$medianDS,statesSpread$spreadDS,main="Spread vs Level Plot without log",xlab = "Median",ylab="Spread")
linear<-lm(statesSpread$spreadDS~statesSpread$medianDS)
abline(linear,lty=2,col="blue")
1-linear$coefficients[2]
plot(log10(statesSpread$medianDS),log10(statesSpread$spreadDS),main="Spread vs Level Plot with log",xlab = "Median",ylab="Spread")
linear<-lm(log10(statesSpread$spreadDS)~log10(statesSpread$medianDS))
abline(linear,lty=2,col="blue")
linear$coefficients[2]
source("plotTransformBatch.R")
plotTransformBatch(counties$state)
plotTransformBatch(counties$population)
linear$coefficients[2]
1-linear$coefficients[2]
median(0.2845157
0.6740539
0.8392882
0.916881
0.9437344
0.9631158
0.9734973
0.9793535
0.9864518
0.9888635
0.993111
0.9947331
)
median(0.2845157,
0.6740539,
0.8392882,
0.916881,
0.9437344,
0.9631158,
0.9734973,
0.9793535,
0.9864518,
0.9888635,
0.993111,
0.9947331
)
median(0.2845157,
0.6740539,
0.8392882,
0.916881,
0.9437344,
0.9631158,
0.9734973,
0.9793535,
0.9864518,
0.9888635,
0.993111,
0.9947331
)
median(0.2845157,
0.6740539,
0.8392882,
0.916881,
0.9437344,
0.9631158,
0.9734973,
0.9793535,
0.9864518,
0.9888635,
0.993111,
0.9947331
)
median(0.2845157,0.6740539,0.8392882,0.916881,0.9437344,0.9631158,0.9734973,0.9793535,0.9864518,0.9888635,0.993111,0.9947331)
median(c(0.2845157,0.6740539,0.8392882,0.916881,0.9437344,0.9631158,0.9734973,0.9793535,0.9864518,0.9888635,0.993111,0.9947331))
#Transformation plots
xlf<-function(xl,xu,median){
return (((xl+xu)/2)-median)
}
ylf<-function(xl,xu,median){
return (((xu-median)^2+(median-xl)^2)/(4*median))
}
median<-c(179140.5)
letters<-c("F","E","D","C","B","A")
xl<-c(45578.0,20007.0,13994.0,6463.0,2207.5,1175.0)
xu<-c(685306.0,1418788.0,2112425.5,3052772.5,6456959.0,9818605.0)
xlab <- as.numeric()
ylab <- as.numeric()
p <- as.numeric()
for (i in seq(1:length(letters))){
ytemp<-ylf(xl[i],xu[i],median)
xtemp<-xlf(xl[i],xu[i],median)
ylab <- c(ylab,ytemp)
xlab <- c(xlab,xtemp)
p<-c(p,(1-(ytemp/xtemp)))
}
estimator<-cbind(letters,xl,xu,xlab,ylab,p)
print(estimator)
FL<-c(2142,1788,1517,1248,963.5,727.5,579,345,114)
M<-c(3678,4115.5,4400.5,4799,4978.75,5241,5394.5,5510.25,5494)
FU<-c(4944,6643,7284,8350,8994,9754.5,10210,10675.5,1087)
Letters<-c("F","E","D","C","B","A","Z","Y","")
z<-cbind(FL,M,FU)
z<-(690*(z)^(1/3))-7000
z<-cbind(Letters,z)
z<-(690*(z)^(1/3))-6960
FL<-c(2142,1788,1517,1248,963.5,727.5,579,345,114)
M<-c(3678,4115.5,4400.5,4799,4978.75,5241,5394.5,5510.25,5494)
FU<-c(4944,6643,7284,8350,8994,9754.5,10210,10675.5,1087)
Letters<-c("F","E","D","C","B","A","Z","Y","")
z<-cbind(FL,M,FU)
z<-(690*(z)^(1/3))-6960
z<-cbind(Letters,z)
z
library(noncensus)
data(counties)
findSpread <- function(nList){
sortedInput<-sort(nList)
medianFlg<-(1+length(sortedInput))/2
median <- ifelse(medianFlg==floor(medianFlg),sortedInput[medianFlg],(sortedInput[medianFlg-0.5]+sortedInput[medianFlg+0.5])/2)
#print(median)
flFlg<-(1+floor(medianFlg))/2
fl<-ifelse(flFlg==floor(flFlg),sortedInput[flFlg],(sortedInput[flFlg-0.5]+sortedInput[flFlg+0.5]/2))
#print(fl)
fuFlg<-length(sortedInput)-flFlg+1
fu<-ifelse(fuFlg==floor(fuFlg),sortedInput[fuFlg],(sortedInput[fuFlg-0.5]+sortedInput[fuFlg+0.5]/2))
#print(fu)
return(fu-fl)
}
states <- levels(counties$state)
medianDS <- as.numeric()
spreadDS <- as.numeric()
for (i in states){
inState <- subset(counties,state==i)
inPop <- sort(inState$population[!is.na(inState$population)])
median <- median(inState$population)
medianDS <- c(medianDS,median)
spread <- findSpread(inPop)
spreadDS <- c(spreadDS,spread)
}
statesSpread <- cbind.data.frame(states,medianDS,spreadDS)
statesSpread <- statesSpread[complete.cases(statesSpread),]
statesSpread <- subset(statesSpread,medianDS>0 & spreadDS >0)
statesSpread[statesSpread$states %!in% c("PR","GU","VI"),]
plot(statesSpread$medianDS,statesSpread$spreadDS,main="Spread vs Level Plot without log",xlab = "Median",ylab="Spread")
linear<-lm(statesSpread$spreadDS~statesSpread$medianDS)
abline(linear,lty=2,col="blue")
1-linear$coefficients[2]
plot(log10(statesSpread$medianDS),log10(statesSpread$spreadDS),main="Spread vs Level Plot with log",xlab = "Median",ylab="Spread")
linear<-lm(log10(statesSpread$spreadDS)~log10(statesSpread$medianDS))
abline(linear,lty=2,col="blue")
linear
a<-cbind(FL,FU)
a
colnames(a)
colnames(a)<-c(1,2)
a
rownames(a)<-1:10
a<-1:10
b<-1:10
cor(a,b)
cor(a)
?cor
cor(x)
cor(a)
cor(a,y)
cor(a,b)
b<-21:30
cor(a,b)
cor(1:10,10:1)
cor(1:10,10:30)
cor(1:10,11:30)
cor(1:10,21:30)
library(cluster)
data("votes.repub")
voters.repub
df<-as.data.frame(votes.repub[,])
df
df1<-df
df1[,18]
df1<-df1[18,]
df1
df1<-df1[,18]
library(sqldf)
b<-sqldf('select x1976 from df where contries in ('Lousiana','Georgia')')
